datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id                Int       @id @default(autoincrement())
  nombre            String
  email             String    @unique
  password          String
  fechaCreacion     DateTime  @default(now())
  ultimoAcceso      DateTime?
  tokenRecuperacion String?
  tokenExpiracion   DateTime?

  permisos           PermisoUsuario[]
  actividadesCreadas Actividad[]      @relation("UsuarioActividadesCreadas")
  archivos           Archivo[]        @relation("UsuarioArchivos")
  asignados          PermisoUsuario[] @relation("AsignadoPor") // Relación inversa para asignadoPor
  citas              Cita[]           @relation("UsuarioCitas")
}

model PermisoUsuario {
  id              Int      @id @default(autoincrement())
  usuarioId       Int
  permiso         String
  fechaAsignacion DateTime @default(now())
  asignadoPorId   Int?

  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  asignadoPor Usuario? @relation("AsignadoPor", fields: [asignadoPorId], references: [id])

  @@unique([usuarioId, permiso])
}

model TipoActividad {
  id          Int    @id @default(autoincrement())
  nombre      String @unique
  descripcion String

  actividades Actividad[]
}

model Lugar {
  id     Int     @id @default(autoincrement())
  nombre String  @unique
  cupo   Int?
  activo Boolean @default(true)

  citas Cita[] // Relación inversa a Lugar en Cita
}

model Oferente {
  id                 Int     @id @default(autoincrement())
  nombre             String  @unique
  docenteResponsable String
  activo             Boolean @default(true)

  actividadesOferente ActividadOferente[]
}

model SocioComunitario {
  id     Int     @id @default(autoincrement())
  nombre String  @unique
  activo Boolean @default(true)

  actividades Actividad[]
}

model Proyecto {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  descripcion String?
  fechaInicio DateTime
  fechaFin    DateTime?
  activo      Boolean   @default(true)

  actividades Actividad[]
}

model Actividad {
  id                 Int              @id @default(autoincrement())
  nombre             String
  tipoActividadId    Int
  tipoActividad      TipoActividad    @relation(fields: [tipoActividadId], references: [id])
  periodicidad       Periodicidad
  fechaInicio        DateTime
  fechaFin           DateTime?
  cupo               Int?
  socioComunitarioId Int
  socioComunitario   SocioComunitario @relation(fields: [socioComunitarioId], references: [id])
  proyectoId         Int?
  proyecto           Proyecto?        @relation(fields: [proyectoId], references: [id])
  estado             EstadoActividad  @default(Programada)
  fechaCreacion      DateTime         @default(now())
  creadoPorId        Int
  creadoPor          Usuario          @relation("UsuarioActividadesCreadas", fields: [creadoPorId], references: [id])

  archivos                 Archivo[]
  citas                    Cita[]                  @relation("ActividadCitas")
  actividadesBeneficiarios ActividadBeneficiario[]
  actividadesOferentes     ActividadOferente[]     @relation("ActividadOferentes")
}

enum EstadoActividad {
  Programada
  Cancelada
  Completada
}

enum Periodicidad {
  Puntual
  Periódica
}

model Cita {
  id                Int        @id @default(autoincrement())
  actividadId       Int
  lugarId           Int
  fecha             DateTime
  horaInicio        String
  horaFin           String?
  estado            EstadoCita @default(Programada)
  motivoCancelacion String?
  fechaCreacion     DateTime   @default(now())
  creadoPorId       Int

  actividad Actividad @relation("ActividadCitas", fields: [actividadId], references: [id])
  lugar     Lugar     @relation(fields: [lugarId], references: [id])
  creadoPor Usuario   @relation("UsuarioCitas", fields: [creadoPorId], references: [id])
}

enum EstadoCita {
  Programada
  Cancelada
  Completada
}

model ActividadOferente {
  actividadId Int
  oferenteId  Int
  actividad   Actividad @relation("ActividadOferentes", fields: [actividadId], references: [id])
  oferente    Oferente  @relation(fields: [oferenteId], references: [id])

  @@id([actividadId, oferenteId])
}

model ActividadBeneficiario {
  actividadId    Int
  beneficiarioId Int
  actividad      Actividad    @relation(fields: [actividadId], references: [id])
  beneficiario   Beneficiario @relation(fields: [beneficiarioId], references: [id])

  @@id([actividadId, beneficiarioId])
}

model Beneficiario {
  id              Int     @id @default(autoincrement())
  caracterizacion String
  activo          Boolean @default(true)

  actividadesBeneficiarios ActividadBeneficiario[]
}

model Archivo {
  id           Int       @id @default(autoincrement())
  nombre       String
  ruta         String
  tipo         String
  tamano       Int
  actividadId  Int
  tipoAdjunto  String
  descripcion  String?
  fechaCarga   DateTime  @default(now())
  cargadoPorId Int
  actividad    Actividad @relation(fields: [actividadId], references: [id])
  cargadoPor   Usuario   @relation("UsuarioArchivos", fields: [cargadoPorId], references: [id])
}
